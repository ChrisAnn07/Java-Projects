import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

public class Snake extends JPanel implements ActionListener{

	private int w = 1000;
	private int h = 500;
	private int unitSize = 30;
	private int units = (w*h)/(int)(Math.pow(unitSize, 2));
	private int delay = 175;
	private int x[] = new int[units];
	private int y[] = new int[units];
	private int bodyParts = 6;
	private int count;
	private ImageIcon img;
	private int appleX;
	private int appleY;
	private char direction = 'R';
	private boolean running = false;
	private Timer timer;
	private Random random;
	private JLabel label1; 
	private int rectX, rectY;
	private boolean movingRight = true;
	private int xRect[] = new int[299];
	private int xValues1[] = new int[50];
	private int xValues2[] = new int[50];
	private int xValues3[] = new int[50];
	
	public Snake(int w, int h){
		random = new Random();
		this.setPreferredSize(new Dimension(w,h));
		this.setBackground(new Color(21, 35, 90));
		this.setFocusable(true);
		this.addKeyListener(new Keys());
		label1 = new JLabel("SCORE:", JLabel.CENTER);
		label1.setForeground(new Color(255, 153, 204));
		img = new ImageIcon("src/apple.png");
		
		rectX = 200;
		rectY = 300;
		
		//places the apple in different locations
		appleX = random.nextInt((int)(w/unitSize))*unitSize;
		appleY = random.nextInt((int)(h/unitSize))*unitSize;
		running = true;
		
		//starts the timer for the snake to move
		timer = new Timer(delay,this);
		timer.start();
		
		add(label1);
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		 g.setColor(Color.red);
         g.fillRect(rectX,rectY,300,20);
		
         if(count >= 5) {
        	 g.setColor(Color.green);
        	 g.fillRect(50, 450, 50, 20);
         }
         if(count >= 10) {
        	 g.setColor(Color.green);
        	 g.fillRect(300, 120, 50, 20);
         }
         if(count >= 15) {
        	 g.setColor(Color.green);
        	 g.fillRect(700, 330, 50, 20);
         }
		
       
		//draws apple and snake if running is true(no collisions)
		if(running) {
			
			g.setColor(Color.red);
			g.fillOval(appleX, appleY, unitSize, unitSize);
			img.paintIcon(this, g, appleX-(unitSize/2)+10, appleY-(unitSize/2)+7);
			img.setImage(img.getImage().getScaledInstance(unitSize+10, unitSize+10, Image.SCALE_DEFAULT));
			
		
			for(int i = 0; i< bodyParts;i++) {
				
					g.setColor(new Color(38,196,91));
					g.fillRect(x[i], y[i], unitSize, unitSize);
							
			}
			
			label1.setText("SCORE: " + count);
			label1.setFont(new Font("Courier", Font.BOLD, 25));
			
		}
		//if there is a collision it will print game over
		else {
			label1.setText("GAME OVER. TRY AGAIN!");
			label1.setFont(new Font("Courier", Font.BOLD, 25));
		
		}
		
	
	}
	
	
	
	//moves the snake 
	public void move(){
		for(int i = bodyParts; i>0; i--) {
			x[i] = x[i-1];
			y[i] = y[i-1];
		}
		
		switch(direction) {
		case 'U':
			y[0] = y[0] - unitSize;
			break;
		case 'D':
			y[0] = y[0] + unitSize;
			break;
		case 'L':
			x[0] = x[0] - unitSize;
			break;
		case 'R':
			x[0] = x[0] + unitSize;
			break;
		}
		
	}

	
	//checks for collisions 
	public void collisions() {
		//checks if head collides with body
		for(int i = bodyParts;i>0;i--) {
			if((x[0] == x[i])&& (y[0] == y[i])) {
				running = false;
			}
		}
		//check if head touches left border
		if(x[0] < 0) {
			running = false;
		}
		//check if head touches right border
		if(x[0] > w) {
			running = false;
		}
		//check if head touches top border
		if(y[0] < 0) {
			running = false;
		}
		//check if head touches bottom border
		if(y[0] > h) {
			running = false;
		}
		//check if head touches the red obstacle
		for(int i = 0; i<xRect.length; i++) {
			xRect[i] = 300 + i;
			if(x[0] == xRect[i] && y[0] == rectY) 
			   running = false;
		}
		//check if head touches the green obstacles
		if(count >= 5) {
		for(int i = 0; i<xValues1.length; i++) {
			xValues1[i] = i + 50;
			if(x[0] == xValues1[i] && y[0] == 450) 
			   running = false;
		}
		}
		if(count>=10) {
		for(int i = 0; i<xValues2.length; i++) {
			xValues2[i] = i + 300;
			if(x[0] == xValues2[i] && y[0] == 120) 
			   running = false;
		}
		}
		if(count>=15) {
		for(int i = 0; i<xValues3.length; i++) {
			xValues3[i] = i + 700;
			if(x[0] == xValues3[i] && y[0] == 330) 
			   running = false;
		}
		}
		//if collision is present, the snake stops moving and timer stops 
		if(!running) {
			timer.stop();
		}
		
	}
	
	
	
	public void actionPerformed(ActionEvent e) {

		if(running) {
			move();
			if((x[0] == appleX) && (y[0] == appleY)) {
				bodyParts++;
				count++;
				appleX = random.nextInt((int)(w/unitSize))*unitSize;
				appleY = random.nextInt((int)(h/unitSize))*unitSize;
			}
			collisions();
		}
	
		
		if(rectX == 200)
			movingRight = true;
			
		if (rectX == 500) // turn around and go the other way
		    movingRight = false;
		
		
		if(movingRight)
		   rectX+=unitSize;
		
		if(movingRight==false)
		   rectX-=unitSize;
		
		repaint();
	}


	
	//key movement with arrow keys
	private class Keys implements KeyListener{
		@Override
		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if(direction != 'R') {
					direction = 'L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if(direction != 'L') {
					direction = 'R';
				}
				break;
			case KeyEvent.VK_UP:
				if(direction != 'D') {
					direction = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if(direction != 'U') {
					direction = 'D';
				}
				break;
			}
		}

		@Override
		public void keyTyped(KeyEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub
			
		}
	}
}
